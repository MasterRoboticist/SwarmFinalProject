numClasses = 256 * 6
angleRange = 0.1745  #10 degrees in radians (means 20 degree view angle)
fieldSize = 400 # I don't know what this actually is,  but 400 is big enough
maxColors = 255 * 6 # 255 for each of r, g, and b

# wheel speeds
vl0 = -1.0
vr0 = 0.33
vl1 = 0.33
vr1 = 1.0
vl2 = -1.0
vr2 = 1.0
speedMultiplier = 20.0 # multiplier to make speed faster/slower

N = 25
K = 2
count = 0

function init() {
	seed = id*5
	#name = string.concat("Data/info", string.tostring(id), ".txt")
	#Here I try to open a tfcloseext document called info
	#datat = io.fopen(name,"w")
	#log("Data is : ", datat)
	#initData = string.concat(string.tostring(N), ", ", string.tostring(K), ", ", string.tostring(seed))
	#io.fwrite(datat,initData)

  # Pick a random initial value for the counter
  math.rng.setseed(seed)
  class = math.rng.uniform(numClasses)
	state = 0
	neighborColors = {}

	position = {}
	position[0] = pose['position']['x']
	position[1] = pose['position']['y']

  # Listen to messages about a robot's color
  neighbors.listen("Color",
    function(topic, value, robot){
      #log("Got (", topic, ",", value, ") from robot id=", robot)
			neighborColors[robot] = value
			#log(neighborColors.robot)
			#other = robot-1
			#log(neighborColors.other)
    })
}



function step() {
	log(pose['position']['x'])
	foreach(pose['position'], function(key, value) {
      log(key, " -> ", value)
    })
  count = count + 1
	#log(stimulus[0], ", ", stimulus[1])
	# find closest neighbor
	closestNeighborId = -1
	closestDist = 2*fieldSize # some larger than maximum distance
	neighbors.foreach(
  	function(rid, data) {
			angle = abs(data.azimuth)
			# if the neighbor is within view range of the robot
			if(angle < angleRange or 3.14+angle < angleRange){
				#log("robot ", rid,": azimuth:",angle, " d = ", data.distance)
				#remember the closest robot
				if (closestDist > data.distance){
					#log("robot ", rid, " is closest, d = ", data.distance)
					closestNeighborId = rid
					closestDist = data.distance
				}
			}
	})

	reaction = 0

	# if a closest neighbor was found, determine which reaction is appropriate
	if(closestNeighborId > -1){
		otherClass = neighborColors[closestNeighborId]
		#log("otherClass = ", otherClass, " class = ", class)
		# robot is of same class
		if(otherClass != nil){
			if(minDist(otherClass) < N){ reaction = 1 }
			# robot is of different class
			else { reaction = 2 } 
		}
		if(otherClass != nil){
			class = (class + signK(otherClass)*K)%numClasses
			#if(class > otherClass) { class = (class - K)%numClasses }
			#else { class = (class + K)%numClasses }
		}
	}

	# set wheel speeds
	if(reaction == 0){
		set_wheels(vl0*speedMultiplier, vr0*speedMultiplier)
	}
	else if(reaction == 1){
		set_wheels(vl1*speedMultiplier, vr1*speedMultiplier)
	}
	else{
		set_wheels(vl2*speedMultiplier, vr2*speedMultiplier)
	}

	# make the robots pretty color based on class and total number of classes
	setColor(class)
	position['x'] = pose['position']['x']
	position['y'] = pose['position']['y']

  # Send a message to other robots about color
   neighbors.broadcast("Color", class)

  # Debug message written on top of robot
  debug.print("r=", reaction, "class=", class)
	
	#This is where I try to fill in the text document.

	#if(datat != nil) {
	#	io.fwrite(datat,class)
	#}
	#else { log(io.error_message, "(", io.errno, ")", " Could not write data")}
	
	
}

function reset() {
	#io.fclose(data)
}

function destroy() {
	#io.fclose(data)
}

function abs(num){
	if(num < 0) { return num*-1}
	return num
}

# set color of leds on robot based on their class
# goes through a full gradient of a subset of colors
function setColor(cls){
	# determine color based on its class and total num classes
	color = maxColors/(numClasses)*cls

	# be black, then red, then yellow, then white then cyan, then blue, then black
	if(color < 255){ set_leds(color, 0, 0) }
	else if (color < 255*2) {set_leds(255,color%255,0)}
	else if (color < 255*3) {set_leds(255,255,color%255)}
	else if (color < 255*4) {set_leds(255-color%255, 255, 255)}
	else if (color < 255*5) {set_leds(0, 255-color%255, 255)}
	else {set_leds(0,0,(255-color%255))}
}

function minDist(otherClass){
	# check normal case
	normalDist = math.abs(class - otherClass)
	
	# check case where wraps around
	# adds distances between the classes and the max/min classes and compares to N
	wraparoundDist = math.min((numClasses - otherClass), otherClass) + math.min(numClasses - class, class)

	return math.min(normalDist, wraparoundDist)
}

function signK(otherClass){
	
	return sign((class - otherClass)%numClasses - numClasses/2)
}

function sign(num){
	if(num < 0){return -1}
	else {return 1}
}